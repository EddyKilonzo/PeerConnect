generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String               @id @default(cuid())
  email                    String               @unique
  password                 String
  firstName                String
  lastName                 String
  profilePicture           String?
  bio                      String?
  role                     Role                 @default(USER)
  status                   Status               @default(OFFLINE)
  isEmailVerified          Boolean              @default(false)
  emailVerificationCode    String?
  emailVerificationExpires DateTime?
  passwordResetToken       String?
  passwordResetExpires     DateTime?
  isApproved               Boolean              @default(false)
  profileCompleted         Boolean              @default(false)
  createdAt                DateTime             @default(now())
  updatedAt                DateTime             @updatedAt
  groupLeadership          Group[]              @relation("GroupLeadership")
  groups                   GroupMember[]
  listenerApplication      ListenerApplication?
  receivedMessages         Message[]            @relation("ReceivedMessages")
  messages                 Message[]            @relation("SentMessages")
  listenerSessions         Session[]            @relation("ListenerSessions")
  userSessions             Session[]            @relation("UserSessions")
  topics                   Topic[]              @relation("UserTopics")
  resources                Resource[]
}

model ListenerApplication {
  id         String            @id @default(cuid())
  userId     String            @unique
  bio        String
  experience String
  topics     String[]
  motivation String
  status     ApplicationStatus @default(PENDING)
  adminNotes String?
  reviewedBy String?
  reviewedAt DateTime?
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  user       User              @relation(fields: [userId], references: [id])
}

model Topic {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  groups      Group[]
  resources   Resource[]
  sessions    Session[]
  users       User[]     @relation("UserTopics")
}

model Message {
  id          String      @id @default(cuid())
  senderId    String
  receiverId  String
  content     String
  messageType MessageType @default(TEXT)
  fileUrl     String?
  isRead      Boolean     @default(false)
  sessionId   String?
  groupId     String?
  meetingId   String?
  createdAt   DateTime    @default(now())
  group       Group?      @relation(fields: [groupId], references: [id])
  receiver    User        @relation("ReceivedMessages", fields: [receiverId], references: [id])
  sender      User        @relation("SentMessages", fields: [senderId], references: [id])
  session     Session?    @relation(fields: [sessionId], references: [id])
  meeting     Meeting?    @relation(fields: [meetingId], references: [id])
}

model Session {
  id         String          @id @default(cuid())
  userId     String
  listenerId String
  topicId    String
  status     SessionStatus   @default(ACTIVE)
  startTime  DateTime        @default(now())
  endTime    DateTime?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  messages   Message[]
  listener   User            @relation("ListenerSessions", fields: [listenerId], references: [id])
  topic      Topic           @relation(fields: [topicId], references: [id])
  user       User            @relation("UserSessions", fields: [userId], references: [id])
  summary    SessionSummary?
}

model SessionSummary {
  id                 String   @id @default(cuid())
  sessionId          String   @unique
  keyPoints          String[]
  emotionalTone      String
  actionItems        String[]
  suggestedResources String[]
  aiGenerated        Boolean  @default(true)
  pdfUrl             String?
  createdAt          DateTime @default(now())
  session            Session  @relation(fields: [sessionId], references: [id])
}

model Group {
  id              String        @id @default(cuid())
  name            String
  description     String?
  topicId         String
  leaderId        String?
  isActive        Boolean       @default(true)
  maxMembers      Int           @default(50)
  meetingSchedule String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  leader          User?         @relation("GroupLeadership", fields: [leaderId], references: [id])
  topic           Topic         @relation(fields: [topicId], references: [id])
  members         GroupMember[]
  summary         GroupSummary?
  messages        Message[]
  meetings        Meeting[]
}

model GroupMember {
  id       String    @id @default(cuid())
  userId   String
  groupId  String
  role     GroupRole @default(MEMBER)
  joinedAt DateTime  @default(now())
  group    Group     @relation(fields: [groupId], references: [id])
  user     User      @relation(fields: [userId], references: [id])
}

model GroupSummary {
  id                   String   @id @default(cuid())
  groupId              String   @unique
  topicsCovered        String[]
  groupSentiment       String
  recommendedResources String[]
  aiGenerated          Boolean  @default(true)
  pdfUrl               String?
  createdAt            DateTime @default(now())
  group                Group    @relation(fields: [groupId], references: [id])
}

model Meeting {
  id                  String        @id @default(cuid())
  groupId             String
  title               String
  description         String
  type                MeetingType
  status              MeetingStatus @default(SCHEDULED)
  scheduledStartTime  DateTime
  scheduledEndTime    DateTime?
  actualStartTime     DateTime?
  actualEndTime       DateTime?
  agenda              String[]
  maxParticipants     String?
  notesTemplate       String?
  summaryPdfUrl       String?
  createdBy           String
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  group               Group         @relation(fields: [groupId], references: [id])
  messages            Message[]
}

model Resource {
  id            String       @id @default(cuid())
  title         String
  description   String
  type          ResourceType
  fileUrl       String
  topicId       String
  uploadedById  String
  isApproved    Boolean      @default(false)
  downloadCount Int          @default(0)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  topic         Topic        @relation(fields: [topicId], references: [id])
  uploadedBy    User         @relation(fields: [uploadedById], references: [id])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  relatedId String?
  createdAt DateTime         @default(now())
}

enum Role {
  ADMIN
  LISTENER
  USER
}

enum Status {
  ONLINE
  OFFLINE
  BUSY
  AVAILABLE
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum MessageType {
  TEXT
  FILE
  IMAGE
}

enum SessionStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum GroupRole {
  ADMIN
  LISTENER
  MEMBER
}

enum ResourceType {
  PDF
  VIDEO
  ARTICLE
  AUDIO
}

enum NotificationType {
  SESSION_REMINDER
  NEW_RESOURCE
  GROUP_ACTIVITY
  APPLICATION_UPDATE
  EMAIL_VERIFICATION
  PASSWORD_RESET
  GENERAL
  MEETING_UPDATE
}

enum MeetingType {
  GROUP_THERAPY
  SUPPORT_GROUP
  WORKSHOP
  DISCUSSION
}

enum MeetingStatus {
  SCHEDULED
  ACTIVE
  COMPLETED
  CANCELLED
}
